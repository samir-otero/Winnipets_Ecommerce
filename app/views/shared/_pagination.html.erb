<% if paginated_collection.respond_to?(:current_page) %>
  <div class="pagination-wrapper mt-5">
    <div class="row align-items-center">
      <div class="col-md-6">
        <div class="pagination-info">
          <p class="text-muted mb-0 d-flex align-items-center">
            <i class="bi bi-info-circle me-2"></i>
            <span>Showing <%= page_entries_info paginated_collection %></span>
          </p>
        </div>
      </div>

      <div class="col-md-6">
        <nav aria-label="<%= model_name.titleize %> pagination" class="d-flex justify-content-md-end justify-content-center mt-3 mt-md-0">
          <%= paginate paginated_collection,
              theme: 'winnipets',
              nav_class: 'pagination justify-content-center justify-content-md-end mb-0',
              previous_label: content_tag(:span, class: 'd-flex align-items-center') do
                content_tag(:i, '', class: 'bi bi-chevron-left me-1') + 'Previous'
              end,
              next_label: content_tag(:span, class: 'd-flex align-items-center') do
                'Next' + content_tag(:i, '', class: 'bi bi-chevron-right ms-1')
              end %>
        </nav>
      </div>
    </div>

    <!-- Quick jump for large result sets -->
    <% if paginated_collection.total_pages > 10 %>
      <div class="row mt-3">
        <div class="col-12">
          <div class="d-flex justify-content-center">
            <div class="card border-0 bg-winnipets-light">
              <div class="card-body py-2 px-3">
                <div class="d-flex align-items-center gap-2">
                  <small class="text-muted">Quick jump:</small>
                  <%= form_with url: request.path, method: :get, local: true, class: 'd-flex align-items-center gap-2' do |form| %>
                    <% params.except(:page).each do |key, value| %>
                      <%= form.hidden_field key, value: value %>
                    <% end %>
                    <%= form.select :page,
                        options_for_select((1..paginated_collection.total_pages).map { |i| ["Page #{i}", i] }, paginated_collection.current_page),
                        {},
                        { class: 'form-select form-select-sm', style: 'width: auto;', onchange: 'this.form.submit();' } %>
                    <small class="text-muted">of <%= paginated_collection.total_pages %></small>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    <% end %>
  </div>
<% end %>

<style>
/* Custom Winnipets Pagination Theme */
.pagination {
  --bs-pagination-padding-x: 0.875rem;
  --bs-pagination-padding-y: 0.625rem;
  --bs-pagination-font-size: 0.95rem;
  --bs-pagination-color: var(--winnipets-primary);
  --bs-pagination-bg: white;
  --bs-pagination-border-width: 2px;
  --bs-pagination-border-color: var(--winnipets-cream);
  --bs-pagination-border-radius: 8px;
  --bs-pagination-hover-color: white;
  --bs-pagination-hover-bg: var(--winnipets-primary);
  --bs-pagination-hover-border-color: var(--winnipets-primary);
  --bs-pagination-focus-color: white;
  --bs-pagination-focus-bg: var(--winnipets-primary-light);
  --bs-pagination-focus-box-shadow: 0 0 0 0.25rem rgba(139, 69, 19, 0.1);
  --bs-pagination-active-color: white;
  --bs-pagination-active-bg: var(--winnipets-primary);
  --bs-pagination-active-border-color: var(--winnipets-primary);
  --bs-pagination-disabled-color: var(--winnipets-warm-gray);
  --bs-pagination-disabled-bg: var(--winnipets-cream);
  --bs-pagination-disabled-border-color: var(--winnipets-cream);
}

.pagination .page-item {
  margin: 0 2px;
}

.pagination .page-link {
  transition: all 0.3s ease;
  font-weight: 500;
  border-radius: 8px !important;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(139, 69, 19, 0.2);
  }

  &:focus {
    box-shadow: 0 0 0 0.25rem rgba(139, 69, 19, 0.1);
  }
}

.pagination .page-item.active .page-link {
  background-color: var(--winnipets-primary);
  border-color: var(--winnipets-primary);
  box-shadow: 0 4px 12px rgba(139, 69, 19, 0.3);
  transform: translateY(-1px);
}

.pagination .page-item.disabled .page-link {
  opacity: 0.5;
}

.pagination-info {
  font-size: 0.9rem;
}

.pagination-wrapper {
  border-top: 1px solid var(--winnipets-cream);
  padding-top: 2rem;
}

/* Enhanced mobile pagination */
@media (max-width: 576px) {
  .pagination {
    --bs-pagination-padding-x: 0.5rem;
    --bs-pagination-padding-y: 0.375rem;
    --bs-pagination-font-size: 0.875rem;
  }

  /* Hide page numbers on mobile, keep only prev/next and active */
  .pagination .page-item:not(.active):not(.disabled):not(:first-child):not(:last-child) {
    display: none;
  }

  /* Show first, last, and current +/- 1 */
  .pagination .page-item:first-child,
  .pagination .page-item:last-child,
  .pagination .page-item:nth-child(2),
  .pagination .page-item:nth-last-child(2),
  .pagination .page-item.active,
  .pagination .page-item.active + .page-item,
  .pagination .page-item:has(+ .page-item.active) {
    display: block !important;
  }

  .pagination-info {
    text-align: center;
    margin-bottom: 1rem;
  }
}

/* Loading animation for pagination clicks */
.pagination .page-link.loading {
  position: relative;
  color: transparent !important;
}

.pagination .page-link.loading::after {
  content: '';
  position: absolute;
  width: 16px;
  height: 16px;
  margin: auto;
  border: 2px solid transparent;
  border-top-color: var(--winnipets-primary);
  border-radius: 50%;
  animation: spin 1s ease infinite;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Smooth transitions for page changes */
.pagination-wrapper {
  transition: opacity 0.3s ease;
}

.pagination-wrapper.loading {
  opacity: 0.7;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Add loading states to pagination links
  const paginationLinks = document.querySelectorAll('.pagination .page-link:not([disabled])');

  paginationLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      // Don't add loading to current page or disabled links
      if (this.closest('.page-item').classList.contains('active') ||
          this.closest('.page-item').classList.contains('disabled')) {
        return;
      }

      // Add loading class
      this.classList.add('loading');

      // Add loading state to wrapper
      const wrapper = document.querySelector('.pagination-wrapper');
      if (wrapper) {
        wrapper.classList.add('loading');
      }
    });
  });

  // Enhanced accessibility
  const currentPage = document.querySelector('.pagination .page-item.active .page-link');
  if (currentPage) {
    currentPage.setAttribute('aria-label', `Current page, page ${currentPage.textContent.trim()}`);
  }

  // Add tooltips to pagination buttons
  paginationLinks.forEach((link, index) => {
    const pageItem = link.closest('.page-item');
    const text = link.textContent.trim();

    if (text.includes('Previous')) {
      link.setAttribute('title', 'Go to previous page');
    } else if (text.includes('Next')) {
      link.setAttribute('title', 'Go to next page');
    } else if (!pageItem.classList.contains('active')) {
      link.setAttribute('title', `Go to page ${text}`);
    }
  });
});
</script>